"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var unicode_arabic_1 = require("./unicode-arabic");
var isArabic_1 = require("./isArabic");
var reference_1 = require("./reference");
function ParentLetter(letter) {
    if (!isArabic_1.isArabic(letter)) {
        throw new Error('Not an Arabic letter');
    }
    for (var w = 0; w < reference_1.letterList.length; w++) {
        // ok so we are checking this potential lettertron
        var letterForms = unicode_arabic_1.default[reference_1.letterList[w]];
        var versions = Object.keys(letterForms);
        for (var v = 0; v < versions.length; v++) {
            var localVersion = letterForms[versions[v]];
            if (typeof localVersion === 'object' && typeof localVersion.indexOf === 'undefined') {
                // look at this embedded object
                var embeddedForms = Object.keys(localVersion);
                for (var ef = 0; ef < embeddedForms.length; ef++) {
                    var form = localVersion[embeddedForms[ef]];
                    if (form === letter || (typeof form === 'object' && form.indexOf && form.indexOf(letter) > -1)) {
                        // match
                        return localVersion;
                    }
                }
            }
            else if (localVersion === letter || (typeof localVersion === 'object' && localVersion.indexOf && localVersion.indexOf(letter) > -1)) {
                // match
                return letterForms;
            }
        }
        return null;
    }
}
exports.ParentLetter = ParentLetter;
function GrandparentLetter(letter) {
    if (!isArabic_1.isArabic(letter)) {
        throw new Error('Not an Arabic letter');
    }
    for (var w = 0; w < reference_1.letterList.length; w++) {
        // ok so we are checking this potential lettertron
        var letterForms = unicode_arabic_1.default[reference_1.letterList[w]];
        var versions = Object.keys(letterForms);
        for (var v = 0; v < versions.length; v++) {
            var localVersion = letterForms[versions[v]];
            if (typeof localVersion === 'object' && typeof localVersion.indexOf === 'undefined') {
                // look at this embedded object
                var embeddedForms = Object.keys(localVersion);
                for (var ef = 0; ef < embeddedForms.length; ef++) {
                    var form = localVersion[embeddedForms[ef]];
                    if (form === letter || (typeof form === 'object' && form.indexOf && form.indexOf(letter) > -1)) {
                        // match
                        return letterForms;
                    }
                }
            }
            else if (localVersion === letter || (typeof localVersion === 'object' && localVersion.indexOf && localVersion.indexOf(letter) > -1)) {
                // match
                return letterForms;
            }
        }
        return null;
    }
}
exports.GrandparentLetter = GrandparentLetter;
